Среда разработки SES 5.10a
J-Flash 6.82e
непоключаемый маячек
Изменил линкер с SEGGER на GNU и появилась переменная __data_start__
Изменил наследование областей памяти. Потому что в Debug конфигурации были совсем не те адреса RAM которые в Common
Добавил скрипт на событие Reset (который я ранее и удалил) так как без него отладчик запускался в какие-то произвольные области памяти
На сегодня работает Advertising но не могу настроить интервал. он все время 100мс

Усложнил: взял за основу 'example\templete_S130'
из коробки не работал модуль fds потому что в flash_placement.xml не было сегмента .fs_data
файл заменил по советам отсюда
https://devzone.nordicsemi.com/f/nordic-q-a/12029/segger-embedded-studio---unplaced_sections-problem
и также добавил отдельны файлик 'fs_data_init.s' для инициализации .fs_data RAM путем копирования из ROM чтобі не менять стоковый 'source\thumb_crt0.s'
макрос APP_ENTRY_POINT = Init_section_fs_data настроил для входа в эту функцию перед main

добавил статический пароль для соединения. Добавил логгирование различных событий чтобы понимать что происходит
Обновил SES до версии 5.10b. J-Link обновился до 6.86b версии и стал ругаться что он не оригинальный
вернул назад J-Flash 6.82e и ругань прекратилась
кстати после переустановки SES надо снова првить файл tolls.xml как здесь
https://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v14.1.0/sdk_config.html

Добавил сервис батареи:
1. дописал ID в m_adv_uuids[]
2. создал процедуру обновления battery_level_update(void)
3. Прицепил ее к таймеру battery_level_meas_timeout_handler
4. создал таймер APP_TIMER_DEF(m_battery_timer_id)  и запустил его в application_timers_start(void)
5. добавил инициализацию сервиса батареи в services_init(void)
от себя (нет в примерах)
	добавил bas_handler обработчик событий. Реагирует на запись в характеристику Client Charackteristic Configuration


Добавил сервил led button Service
1. переименовал его в input output Service ios
2. добавил инициализацию в services_init(void)
3. добавил ble_ios_on_ble_evt в ble_evt_dispatch

Добавил аналоговый модуль для управления работой повышающего преобразователя
Модуль запускается через обработчик APP_TIMER analogPart_timeout_handler.
Циклограмма основана на таймере TIMER1. Вначале включается компаратор LPCOMP со сравением с AREF0.
После выработки LPCOMP READY в прерывании включается силовой транзистор и запускается таймер
Событие CC[0] через PPI выключает силовой транзистор
Событие CC[1] остсанавливает таймер и анализирует выброс по состоянию EVENT UP LPCOMP. При необходимости цикл повторяется 20 раз. После этого запускается ADC замера батареи
Обработчик пррывааний ADC переводит модуль в IDLE

